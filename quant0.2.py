{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import datetime\n",
    "from datetime import datetime\n",
    "\n",
    "data=pd.read_excel('C:\\\\Users\\\\mimaa\\\\OneDrive - The Chinese University of Hong Kong\\\\Desktop\\\\stocks.xlsx',sheet_name=0)\n",
    "symbol=data['symbol']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "def DataOfLookUp():\n",
    "    df=pd.DataFrame()\n",
    "    time=(datetime.now()).strftime('%Y-%m-%d %H:%M:%S')\n",
    "    df.loc[0,'日期时间']=time\n",
    "    for ticker in symbol:\n",
    "        tickerNumber=ticker[:6]\n",
    "        tickerLocation=ticker[-2:]\n",
    "        x=requests.get('https://eminterservice.eastmoney.com/UserData/GetWebTape?code='+tickerLocation+tickerNumber)\n",
    "        text=x.text\n",
    "        index=text.find('TapeZ')\n",
    "        if index==-1:\n",
    "            df[ticker]=None\n",
    "        else:\n",
    "            percent=text[41:47]\n",
    "            index1=percent.find(',')\n",
    "            df[ticker]=percent[:index1]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=None\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n",
      "C:\\Users\\mimaa\\AppData\\Local\\Temp\\ipykernel_17072\\2531274617.py:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  df[ticker]=percent[:index1]\n"
     ]
    }
   ],
   "source": [
    "df=DataOfLookUp()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
